name: New Threat workflow

on:
  workflow_call:
    inputs:
      cveNumber:
        description: 'CVE to test for'
        required: true
      vulnerablePackage:
        description: 'Package to check'
        required: true
      packageVersions:
        description: 'Maximum vulnerable version (inclusive)'
        required: true

jobs:
  scan-for-cve:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download jq binary
        run: |
          curl -L -o jq https://github.com/stedolan/jq/releases/latest/download/jq-linux64
          chmod +x jq
          mkdir -p $HOME/.local/bin
          mv jq $HOME/.local/bin/

      - name: Add jq to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Verify jq installation
        run: jq --version

      - name: Find vulnerable package version(s)
        id: check_vulnerable
        run: |
          PACKAGE="${{ inputs.vulnerablePackage }}"
          MAX_VERSION="${{ inputs.packageVersions }}"

          INSTALLED_VERSION=$(jq -r --arg PACKAGE "$PACKAGE" \
            '(.dependencies[$PACKAGE] // .devDependencies[$PACKAGE])' package.json)

          version_le() {
            [ "$1" = "$2" ] && return 0
            [ "$(printf '%s\n%s' "$1" "$2" | sort -V | head -n1)" = "$1" ]
          }

          if [ "$INSTALLED_VERSION" != "null" ]; then
            # Remove ^, ~, >=, <=, >, < or = prefixes if present
            CLEAN_VERSION=$(echo "$INSTALLED_VERSION" | sed 's/^[^0-9]*//')
            if version_le "$CLEAN_VERSION" "$MAX_VERSION"; then
              echo "Vulnerable version found: $CLEAN_VERSION"
              echo "found_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "No vulnerable versions of $PACKAGE found."
              echo "found_version=" >> $GITHUB_OUTPUT
            fi
          else
            echo "$PACKAGE not found in dependencies or devDependencies."
            echo "found_version=" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Fetch CVE Details from NVD
        id: cvedetails
        if: steps.check_vulnerable.outputs.found_version != ''
        run: |
          CVE="${{ inputs.cveNumber }}"
          curl -s "https://services.nvd.nist.gov/rest/json/cve/1.0/$CVE" -o cve.json
          SUMMARY=$(jq -r '.result.CVE_Items[0].cve.description.description_data[0].value' cve.json)
          [ "$SUMMARY" = "null" ] && SUMMARY="No summary found for $CVE"
          echo "summary=$SUMMARY" >> $GITHUB_OUTPUT

      - name: Create GitHub Issue if Vulnerable Version found
        if: steps.check_vulnerable.outputs.found_version != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const cve = '${{ inputs.cveNumber }}';
            const pkg = '${{ inputs.vulnerablePackage }}';
            const version = '${{ steps.check_vulnerable.outputs.found_version }}';
            const summary = `${{ steps.cvedetails.outputs.summary }}`;
            const title = `[Security] ${pkg} vulnerable to ${cve} (found version: ${version})`;
            const body =
              `**${pkg}** version **${version}** was found in package.json and is vulnerable to **${cve}**\n\n` +
              `CVE summary:\n${summary}\n\n` +
              `[CVE link](https://nvd.nist.gov/vuln/detail/${cve})`;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['security', 'vulnerability']
            });

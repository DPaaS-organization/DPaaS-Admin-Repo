name: SonarQube Workflow

on:
  workflow_call:
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_PROJECT_KEY:  
        required: true

jobs:
  # Performs a static analysis of the source code.
  # Returns a list of 'security hotspots' that indicate potential software weaknesses
  sonar:
    runs-on: ubuntu-latest
    steps:
      # Check out source code from the repository
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Preforms SonarQube scan and stores results on external SonarQube dashboard.
      # @SONAR_TOKEN: token used for SonarQube authentication, specific to the SonarQube environment
      # @SONAR_PROJECT_VERSION: version of the SonarQube project.
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_VERSION: '1.0'  

      # Retrieve security issues from external SonarQube dashboard via a cURL command. 
      # The issues are saved and stored in an issues.json file to use in the next step.
      # @SONAR_TOKEN: token used for SonarQube authentication, specific to the SonarQube environment
      # @SONAR_PROJECT_KEY: This key is specific to the SonarQube project. It specifies which
      # project issues to retrieve
      - name: Get SonarQube Issues
        id: get_issues
        run: |
          curl -s -u ${{ secrets.SONAR_TOKEN }} \
            "https://sonarcloud.io/api/issues/search?projectKeys=${{ secrets.SONAR_PROJECT_KEY }}"  -vv \
            | jq -c '[.issues[]]' > issues.json  
    
          echo "::set-output name=issues::$(cat issues.json)" 

      - name: Debug Issues
        run: cat issues.json
      
      # Use the issues.json to generate GitHub issues via cURL command. These issues can be linked to a planning tool.
      # @GITHUB_TOKEN: A token specific to a GitHub repository. This specifies in which project
      # the issues are uploaded.
      - name: Create GitHub Issues for Security Problems
        env:
          GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SECURITY_RULES=("typescript:S2486" "typescript:S1135" "typescript:S1134") # Add relevant security rules
      
          jq -c '.[]' issues.json | while read -r issue; do
            # Extract relevant fields
            KEY=$(echo "$issue" | jq -r '.key')
            RULE=$(echo "$issue" | jq -r '.rule')
            SEVERITY=$(echo "$issue" | jq -r '.severity')
            COMPONENT=$(echo "$issue" | jq -r '.component')
            DESCRIPTION=$(echo "$issue" | jq -r '.message')
      
            # Check if the issue is security-related
            if [[ ! " ${SECURITY_RULES[@]} " =~ " ${RULE} " ]]; then
              continue
            fi
      
            # Create issue title and body
            TITLE="Security Issue: $DESCRIPTION ($SEVERITY)"
            BODY="### Security Issue Details
      
            - **Rule:** $RULE
            - **Severity:** $SEVERITY
            - **Component:** $COMPONENT
            - **Description:** $DESCRIPTION
            - **Unique Key:** $KEY"
      
            # Escape title and body for JSON
            title_escaped=$(echo "$TITLE" | jq -Rr @json)
            body_escaped=$(echo "$BODY" | jq -Rr @json)
      
            # Debug the escaped JSON
            echo "Escaped Title: $title_escaped"
            echo "Escaped Body: $body_escaped"
      
            # Check if the issue already exists in GitHub by its key
            echo "Checking if issue with key '$KEY' already exists..."
            existing_issue=$(curl -s -H "Authorization: token $GITHUB_API_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues?state=open&per_page=100" \
              | jq -r --arg KEY "$KEY" '.[] | select(.body | contains($KEY)) | .number')
      
            if [[ -n "$existing_issue" ]]; then
              echo "Issue with key '$KEY' already exists as #$existing_issue. Skipping..."
              continue
            fi
      
            # Create new issue in GitHub
            echo "Creating new issue for key '$KEY'..."
            response=$(curl -s -o response.json -w "%{http_code}" -X POST \
              -H "Authorization: token $GITHUB_API_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "$(jq -n --arg title "$TITLE" --arg body "$BODY" '{title: $title, body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues")
      
            if [[ "$response" -ne 201 ]]; then
              echo "Failed to create issue for key '$KEY'. HTTP Response: $response"
              echo "Error Response:"
              cat response.json
              exit 1
            else
              echo "Issue created successfully for key '$KEY'."
            fi
          done
      
      # Verify whether the scan meets the criteria in the Quality gate set up in SonarQube.
      # When the Quality Gate is not met, an error is given and the build is blocked.
      - name: Check Quality Gate
        run: |
          STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }} \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }}" \
            | jq -r '.projectStatus.status')
          if [ "$STATUS" != "OK" ]; then
            echo "::error ::Quality gate failed: $STATUS"
            exit 1  # Exit with error
          fi

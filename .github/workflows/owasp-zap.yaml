name: OWASP ZAP Scan

on: 
  workflow_call:
    secrets:
      GITHUB_TOKEN:
        required: true

jobs:
  # Performs an OWASP ZAP scan. This is a dynamic test of a fully running application.
  # Firstly the application must be started in a Docker environment.
  zap_scan:
    runs-on: ubuntu-latest
    name: DAST Webapp scan
    steps:
    # Check out source code from the repository.
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: main

    # Pull the latest version of the Docker image and start it in detached mode. 
    # Detached mode means another task can be executed simultaniously
    - name: Run Juice Shop image
      run: | 
        docker pull bkimminich/juice-shop  # Pull the Juice Shop image
        docker run -p 3000:3000 --detach bkimminich/juice-shop  # Run the image in detached mode

    # OWASP ZAP scan is executed on the Docker environment.
    # @GITHUB_TOKEN: A token specific to a GitHub repository. This specifies in which project
    # the issues are uploaded.
    - name: ZAP SCAN
      uses: zaproxy/action-full-scan@v0.12.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}  # Token for GitHub authentication
        docker_name: 'ghcr.io/zaproxy/zaproxy:stable'  # Docker image for ZAP
        target: 'http://localhost:3000'  # Target URL for the scan
        rules_file_name: '.zap/rules.tsv'  # Custom rules for the scan
        cmd_options: '-a'  # Additional command options

    # Generate a report of the OWASP ZAP scan in JSON format.
    - name: Generate ZAP Report
      run: |
        docker run --rm -v ${{ github.workspace }}:/zap/wrk/:rw ghcr.io/zaproxy/zaproxy:stable zap.sh -cmd -quickurl http://localhost:3000 -quickout /zap/wrk/zap_report.json

    # Create GitHub issues for findings from the ZAP report
    - name: Create GitHub Issues for Findings
      run: |
        findings=$(jq -c '.site[].alerts[]' zap_report.json)  # Parse findings from the report

        if [ -z "$findings" ]; then
            echo "No findings to process."  # Exit if no findings
            exit 0
        fi
  
        echo "$findings" | while read -r finding; do
          TITLE=$(echo "$finding" | jq -r '.alert')  # Extract alert title
          DESCRIPTION=$(echo "$finding" | jq -r '.description')  # Extract alert description
          SEVERITY=$(echo "$finding" | jq -r '.severity')  # Extract alert severity

          echo "Title: $TITLE"
          echo "Description: $DESCRIPTION"
          echo "Severity: $SEVERITY"

          # Create a new GitHub issue for each finding
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/issues \
            -d "{\"title\": \"$TITLE\", \"body\": \"Severity: $SEVERITY\n\n$DESCRIPTION\"}")

          echo "Created issue: $response"  # Output response from GitHub API
        done
